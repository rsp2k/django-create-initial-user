name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}, Django ${{ matrix.django-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        django-version: ["4.2", "5.0", "5.1"]
        exclude:
          # Django 5.0+ requires Python 3.10+
          - python-version: "3.9"
            django-version: "5.0"
          - python-version: "3.9"
            django-version: "5.1"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv pip install --system "Django~=${{ matrix.django-version }}.0"
        uv pip install --system -e ".[test]"

    - name: Run Django system checks
      run: |
        python -m django check --settings=tests.settings

    - name: Run tests
      run: |
        python -m django test --settings=tests.settings -v 2

    - name: Run tests with coverage
      if: matrix.python-version == '3.11' && matrix.django-version == '4.2'
      run: |
        uv pip install --system coverage
        coverage run --source='create_initial_superuser' -m django test --settings=tests.settings
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.django-version == '4.2'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"

    - name: Run black
      run: |
        uv run black --check --diff .

    - name: Run isort
      run: |
        uv run isort --check-only --diff .

  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"

    - name: Run safety check
      run: |
        uv run safety check

  build:
    name: Build Package
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Build package
      run: |
        uv build

    - name: Check package
      run: |
        uv pip install --system twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-package:
    name: Test Installed Package
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install package from wheel
      run: |
        uv pip install --system Django>=4.2
        uv pip install --system dist/*.whl

    - name: Test import
      run: |
        python -c "import create_initial_superuser; print('✅ Package imports successfully')"
        python -c "from create_initial_superuser.backends import CreateInitialSuperUserBackend; print('✅ Backend imports successfully')"

    - name: Test Django integration
      run: |
        python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
        import django
        from django.conf import settings
        settings.configure(
            DEBUG=True,
            INSTALLED_APPS=['create_initial_superuser'],
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
            SECRET_KEY='test'
        )
        django.setup()
        from create_initial_superuser.backends import CreateInitialSuperUserBackend
        backend = CreateInitialSuperUserBackend()
        print('✅ Django integration test passed')
        "
