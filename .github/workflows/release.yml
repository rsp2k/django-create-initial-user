name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  test-before-release:
    name: Test Before Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        django-version: ["4.2", "5.0", "5.1"]
        exclude:
          - python-version: "3.9"
            django-version: "5.0"
          - python-version: "3.9"
            django-version: "5.1"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv pip install --system "Django~=${{ matrix.django-version }}.0"
        uv pip install --system -e ".[test]"

    - name: Run Django checks
      run: |
        python -m django check --settings=tests.settings

    - name: Run all tests
      run: |
        python -m django test --settings=tests.settings -v 2

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: test-before-release
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install build dependencies
      run: |
        uv pip install --system build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist
        path: dist/

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test-before-release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Extract tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Build package
      run: |
        uv build

    - name: Extract changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract the latest version's changelog
          awk '/^## / { if(found) exit; if(/^## \[${{ steps.tag.outputs.tag }}|^## ${{ steps.tag.outputs.tag }}/) found=1; next } found' CHANGELOG.md > latest_changes.md
          {
            echo 'CHANGELOG<<EOF'
            cat latest_changes.md
            echo EOF
          } >> $GITHUB_OUTPUT
        else
          echo 'CHANGELOG=Release ${{ steps.tag.outputs.tag }}' >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        body: |
          ## Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Installation

          ```bash
          pip install django-create-initial-user==${{ steps.tag.outputs.tag }}
          ```

          ## Assets

          - Source code (zip/tar.gz)
          - Python wheel and source distribution
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: dist
        asset_content_type: application/zip
